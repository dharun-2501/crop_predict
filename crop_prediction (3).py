# -*- coding: utf-8 -*-
"""crop_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X4w1tWR3V5qaWrnFDZttS1mecbqyKcGf
"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import pandas as pd
import joblib

df=pd.read_csv('/content/crop_recommendation_dataset.csv')

df.head(5)

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()
le2=LabelEncoder()
le3=LabelEncoder()

df['new_soil']=le.fit_transform(df['Soil'])
df['new_reg']=le2.fit_transform(df['Region'])
df['new_crop']=le3.fit_transform(df['Crop'])

df.head()

df.tail()

df=df[['new_soil','new_reg','Rainfall','Temperature','Humidity','new_crop']]

df=df.dropna()

df.head()

X=df[['new_soil','new_reg','Rainfall','Temperature','Humidity']]
y=df['new_crop']

x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)

model=DecisionTreeClassifier()

model.fit(x_train,y_train)

joblib.dump(model,'cropmodel.pkl')

joblib.dump(le3,'crop_label_encoder.pkl')

import streamlit as st
import joblib

# Load model and label encoder
model = joblib.load('cropmodel.pkl')
le = joblib.load('crop_label_encoder.pkl')

st.set_page_config(page_title="Smart Crop Predictor", layout="centered")
st.title("🌾 Smart Crop Recommendation System")
st.markdown("Enter the details below to get the **best crop suggestion** for your land.")

# Input fields
soil_n = st.selectbox("🧱 Soil Type", options=[0, 1, 2, 3], format_func=lambda x: ["Loamy", "Sandy", "Clay", "Red"][x])
region = st.selectbox("📍 Region", options=[0, 1, 2, 3], format_func=lambda x: ["TamilNadu", "Punjab", "Gujarat", "Kerala"][x])
rain = st.slider("🌧️ Rainfall (mm)", min_value=0, max_value=400, value=200)
temp = st.slider("🌡️ Temperature (°C)", min_value=10, max_value=45, value=30)
humi = st.slider("💧 Humidity (%)", min_value=0, max_value=100, value=60)

if st.button("🌿 Predict Best Crop"):
    try:
        pred = model.predict([[soil_n, region, rain, temp, humi]])[0]
        crop_name = le.inverse_transform([pred])[0]
        st.success(f"✅ The best crop for farming is: **{crop_name}**")
    except Exception as e:
        st.error(f"Prediction failed: {e}")

pred=model.predict(x_test)